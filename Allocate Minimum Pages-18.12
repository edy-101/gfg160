class Solution:
    #Function to find minimum number of pages.
    def isValid(self, arr, n, k, mid):
        students = 1
        current_pages = 0
        for i in range(n):
            if arr[i] > mid:
                return False
            if current_pages + arr[i] > mid:
                students += 1
                current_pages = arr[i]
                if students > k:
                    return False
            else:
                current_pages += arr[i]
        return True

    def findPages(self, arr, k):
        n = len(arr)
        if n < k:
            return -1
        low = max(arr)
        high = sum(arr)
        result = high
        while low <= high:
            mid = (low + high) // 2
            if self.isValid(arr, n, k, mid):
                result = mid
                high = mid - 1
            else:
                low = mid + 1
        return result




#{ 
# Driver Code Starts
#Initial Template for Python 3
import bisect
if __name__ == '__main__':
    t = int(input())
    while t:
        t -= 1
        A = [int(x) for x in input().strip().split()]
        nd = [int(x) for x in input().strip().split()]
        D = nd[0]
        ob = Solution()
        ans = ob.findPages(A, D)
        print(ans)
        print("~")
# } Driver Code Ends
